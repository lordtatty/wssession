// Code generated by mockery v2.46.3. DO NOT EDIT.

package wssession_mock

import (
	wssession "github.com/lordtatty/wssession"
	mock "github.com/stretchr/testify/mock"
)

// MockOnConnectFn is an autogenerated mock type for the OnConnectFn type
type MockOnConnectFn[T any] struct {
	mock.Mock
}

type MockOnConnectFn_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockOnConnectFn[T]) EXPECT() *MockOnConnectFn_Expecter[T] {
	return &MockOnConnectFn_Expecter[T]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: m, customState
func (_m *MockOnConnectFn[T]) Execute(m wssession.ReceivedMsg, customState T) (T, error) {
	ret := _m.Called(m, customState)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(wssession.ReceivedMsg, T) (T, error)); ok {
		return rf(m, customState)
	}
	if rf, ok := ret.Get(0).(func(wssession.ReceivedMsg, T) T); ok {
		r0 = rf(m, customState)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(wssession.ReceivedMsg, T) error); ok {
		r1 = rf(m, customState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOnConnectFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockOnConnectFn_Execute_Call[T any] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - m wssession.ReceivedMsg
//   - customState T
func (_e *MockOnConnectFn_Expecter[T]) Execute(m interface{}, customState interface{}) *MockOnConnectFn_Execute_Call[T] {
	return &MockOnConnectFn_Execute_Call[T]{Call: _e.mock.On("Execute", m, customState)}
}

func (_c *MockOnConnectFn_Execute_Call[T]) Run(run func(m wssession.ReceivedMsg, customState T)) *MockOnConnectFn_Execute_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(wssession.ReceivedMsg), args[1].(T))
	})
	return _c
}

func (_c *MockOnConnectFn_Execute_Call[T]) Return(_a0 T, _a1 error) *MockOnConnectFn_Execute_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOnConnectFn_Execute_Call[T]) RunAndReturn(run func(wssession.ReceivedMsg, T) (T, error)) *MockOnConnectFn_Execute_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockOnConnectFn creates a new instance of MockOnConnectFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOnConnectFn[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOnConnectFn[T] {
	mock := &MockOnConnectFn[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
