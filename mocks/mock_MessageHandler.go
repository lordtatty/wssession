// Code generated by mockery v2.46.3. DO NOT EDIT.

package wssession_mock

import (
	json "encoding/json"

	wssession "github.com/lordtatty/wssession"
	mock "github.com/stretchr/testify/mock"
)

// MockMessageHandler is an autogenerated mock type for the MessageHandler type
type MockMessageHandler struct {
	mock.Mock
}

type MockMessageHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageHandler) EXPECT() *MockMessageHandler_Expecter {
	return &MockMessageHandler_Expecter{mock: &_m.Mock}
}

// WSHandle provides a mock function with given fields: w, msg
func (_m *MockMessageHandler) WSHandle(w wssession.Writer, msg json.RawMessage) error {
	ret := _m.Called(w, msg)

	if len(ret) == 0 {
		panic("no return value specified for WSHandle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(wssession.Writer, json.RawMessage) error); ok {
		r0 = rf(w, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageHandler_WSHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WSHandle'
type MockMessageHandler_WSHandle_Call struct {
	*mock.Call
}

// WSHandle is a helper method to define mock.On call
//   - w wssession.Writer
//   - msg json.RawMessage
func (_e *MockMessageHandler_Expecter) WSHandle(w interface{}, msg interface{}) *MockMessageHandler_WSHandle_Call {
	return &MockMessageHandler_WSHandle_Call{Call: _e.mock.On("WSHandle", w, msg)}
}

func (_c *MockMessageHandler_WSHandle_Call) Run(run func(w wssession.Writer, msg json.RawMessage)) *MockMessageHandler_WSHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(wssession.Writer), args[1].(json.RawMessage))
	})
	return _c
}

func (_c *MockMessageHandler_WSHandle_Call) Return(_a0 error) *MockMessageHandler_WSHandle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageHandler_WSHandle_Call) RunAndReturn(run func(wssession.Writer, json.RawMessage) error) *MockMessageHandler_WSHandle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageHandler creates a new instance of MockMessageHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageHandler {
	mock := &MockMessageHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
